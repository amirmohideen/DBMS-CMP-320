/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbcgui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author amir
 */
public class UpdateDeleteStores extends javax.swing.JFrame {

    //myDBCon dbCon;
    
    String DBURL = "jdbc:oracle:thin:@coeoracle.aus.edu:1521:orcl";
    String DBUSER = "b00074559";
    String DBPASS = "b00074559";

    Connection con;
    Statement statement;
    //Statement statement2;
    PreparedStatement prepStatement;
    ResultSet rs;
    //ResultSet rsdeptno;
    
    
    /**
     * Creates new form UpdateDeleteStores
     */
    
    public UpdateDeleteStores() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        try 
        {
            // Load Oracle JDBC Driver
            Class.forName("oracle.jdbc.driver.OracleDriver");
            // Connect to Oracle Database
            con = DriverManager.getConnection(DBURL, DBUSER, DBPASS);
            // make the result set scrolable forward/backward updatable
            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            statement2 = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            getNewData();
        } 
        catch (ClassNotFoundException | SQLException e) 
        {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Connection error.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void getNewData() {

        try 
        {
            String str;
            // populate deptno field
//            rsdeptno = statement.executeQuery("SELECT deptno, dname FROM dept ORDER BY deptno ASC ");
//            cmbDeptno.removeAllItems();
//            while (rsdeptno.next()) {
//                cmbDeptno.addItem(rsdeptno.getString("deptno"));
//            }

            // populate mgr field
            rs = statement.executeQuery("SELECT store_num, store_name, website, phone FROM stores ORDER BY store_num ASC ");
            //cmbMgr.removeAllItems();
//            while (rs.next()) {
//                cmbMgr.addItem(rs.getString("empno"));
//            }

            // populate rest of fields
            rs.beforeFirst();
            rs.first();
            populateFields();
        } 
        catch (SQLException e) 
        {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected empno.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    private void populateFields() {
        try {
            jTextField1.setText(rs.getString("store_num"));
            jTextField2.setText(rs.getString("store_name"));
            jTextField3.setText(rs.getString("website"));
            //cmbMgr.setSelectedItem(rs.getString("mgr"));
            jTextField4.setText(rs.getString("phone"));
//            txtSalary.setText(rs.getString("sal"));
//            txtComm.setText(rs.getString("comm"));
//            cmbDeptno.setSelectedItem(rs.getString("deptno"));

            EnableDisableButtons();
            
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                jButton1.setEnabled(false);
            } else {
                jButton1.setEnabled(true);
            }
            if (rs.isLast()) {
                jButton4.setEnabled(false);
            } else {
                jButton4.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Update/Delete Stores");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Store Number:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Store Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Website:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Phone:");

        jButton1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton1.setText("<<Previous");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton2.setText("UPDATE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton3.setText("DELETE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton4.setText("Next>>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText(".");

        jLabel7.setForeground(new java.awt.Color(255, 51, 51));
        jLabel7.setText(".");

        jLabel8.setForeground(new java.awt.Color(255, 51, 51));
        jLabel8.setText(".");

        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setText(".");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                    .addComponent(jTextField1)
                                    .addComponent(jTextField3)
                                    .addComponent(jTextField4))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jButton4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MovePrevious() {
        try {
            // TODO add your handling code here:

            if (!rs.isFirst()) {
                rs.previous();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void MoveNext() {
        try {
            // TODO add your handling code here:

            if (!rs.isLast()) {

                rs.next();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        // confirmation
        int value = JOptionPane.showConfirmDialog(this, "Do you confirm to delete Store?");
        if (value == 0) 
        {
                    try {

//                            prepStatement = con.prepareStatement("select * from contains WHERE st_num = ?");
//                            prepStatement.setInt(1, Integer.parseInt(jTextField1.getText()));
//                            int result = prepStatement.executeUpdate();
//                        
//                            if(result>0)
//                            {
//                                prepStatement = con.prepareStatement("DELETE contains WHERE st_num = ?");
//                                prepStatement.setInt(1, Integer.parseInt(jTextField1.getText()));
//                                result = prepStatement.executeUpdate();
//                                
//                            }
//                            else
//                            {
//                                JOptionPane.showMessageDialog(null, "Did not find any reference from watch stock to store.\n Continuing to delete store..");
//                                
//                                prepStatement = con.prepareStatement("select * from buys_from WHERE s_num = ?");
//                                prepStatement.setInt(1, Integer.parseInt(jTextField1.getText()));
//                                result = prepStatement.executeUpdate();
//
//                                    if(result>0)
//                                    {
//                                        prepStatement = con.prepareStatement("DELETE buys_from WHERE s_num = ?");
//                                        prepStatement.setInt(1, Integer.parseInt(jTextField1.getText()));
//                                        result = prepStatement.executeUpdate();
//
//                                    }
//                                    else
//                                    {
//                                        JOptionPane.showMessageDialog(null, "Did not find any reference from customer to store.\n Continuing to delete store..");
//
//                                    }
//                            }
                            
                            
                            
                            //old lab way
                            prepStatement = con.prepareStatement("DELETE stores WHERE store_num = ?");
                            prepStatement.setInt(1, Integer.parseInt(jTextField1.getText()));
                            int result = prepStatement.executeUpdate();
                        
                            //new lab way
                            //String prepSQL = "DELETE customers WHERE ssn = " + jTextField1.getText();
                            //int result = dbCon.executePrepared(prepSQL);
                            if (result > 0) 
                            {
                                javax.swing.JLabel label = new javax.swing.JLabel("Store Number " + jTextField1.getText().trim() + " deleted successfully.");
                                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                                getNewData();
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "Error deleting store. SQL Error.");
                            
                            }
                         } 
                            catch (SQLException e) 
                            {
                                JOptionPane.showMessageDialog(null, "Error deleting Store.");
                            }
            }   
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        try {
           // confirmation
            int value = JOptionPane.showConfirmDialog(this, "Do you confirm to update Store?");
                if (value == 0) 
                {
                    if (isValidData()) 
                    {
                        prepStatement = con.prepareStatement("UPDATE stores SET store_name = ?, website = ?, phone = ? WHERE store_num = ?");
                        
                        prepStatement.setString(1, jTextField2.getText());
                        prepStatement.setString(2, jTextField3.getText());
                        prepStatement.setString(3, jTextField4.getText());
                        
                        prepStatement.setInt(4, Integer.parseInt(jTextField1.getText()));
                        
                        int result = prepStatement.executeUpdate();
                       
                            if (result > 0) 
                            {
                                javax.swing.JLabel label = new javax.swing.JLabel("Store Number " + jTextField1.getText() + " updated successfully.");
                                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                                getNewData();
                            } 
                            else 
                            {
                                // Error 1
                                JOptionPane.showMessageDialog(null, "Can't update Store. SQL Issue.");
                            }
                        prepStatement.close();
                    } 
                    else 
                    {
                        javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                        label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                    }

                } 
                
            } 
            catch (SQLException e) 
            {
                JOptionPane.showMessageDialog(null, "Error updating Store." + e.getMessage());
            }   
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

 
    boolean isValidData() {

        clearErrorLabels();
        boolean result = true;
        if (jTextField1.getText().trim().isEmpty() || !isInteger(jTextField1.getText().trim())) {
            if (jTextField1.getText().trim().isEmpty()) {
                jLabel6.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(jTextField1.getText().trim())) {
                jLabel6.setText("Invalid. Must be integer.");
            }

            jLabel6.setVisible(true);
            result = false;
        }

            if (jTextField2.getText().trim().isEmpty()) {
                jLabel7.setText("Invalid. Cannot be empty.");
             
            jLabel7.setVisible(true);
            result = false;
            }
        
            if (jTextField3.getText().trim().isEmpty()) {
                jLabel8.setText("Invalid. Cannot be empty.");
             
            jLabel8.setVisible(true);
            result = false;
            }

         if (jTextField4.getText().trim().isEmpty() || (jTextField4.getText().trim().length() == 8)) {
            if (jTextField4.getText().trim().isEmpty()) {
                jLabel9.setText("Invalid. Cannot be empty.");
            } else if (jTextField4.getText().trim().length() == 8) {
                jLabel9.setText("Invalid. Must be equal to 9 digits.");
            }
            jLabel9.setVisible(true);
            result = false;
            }   

        return result;
    }
    
    void clearErrorLabels() {
        
        jLabel6.setText("");
        jLabel6.setVisible(false);
        jLabel7.setText("");
        jLabel7.setVisible(false);
        jLabel8.setText("");
        jLabel8.setVisible(false);
        jLabel9.setText("");
        jLabel9.setVisible(false);

    }
    
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
